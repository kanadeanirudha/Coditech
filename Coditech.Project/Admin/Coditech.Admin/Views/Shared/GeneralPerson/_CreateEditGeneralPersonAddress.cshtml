@model GeneralPersonAddressViewModel
@{
    Layout = null;
    DropdownViewModel countryDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Country.ToString(), DropdownName = "GeneralCountryMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetRegionListByCountryId('{Model.AddressTypeEnum}')", ClassName = $"GeneralCountryMasterId_{Model.AddressTypeEnum}", IsDisabled = Model.GeneralPersonAddressId > 0 };
    DropdownViewModel regionDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Region.ToString(), DropdownName = "GeneralRegionMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralRegionMasterId), Parameter = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetCityListByRegionId('{Model.AddressTypeEnum}')", ClassName = $"GeneralRegionMasterId_{Model.AddressTypeEnum}", IsDisabled = Model.GeneralPersonAddressId >= 0 };
    DropdownViewModel cityDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.City.ToString(), DropdownName = "GeneralCityMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCityMasterId), Parameter = Convert.ToString(Model.GeneralRegionMasterId), ClassName = $"GeneralCityMasterId_{Model.AddressTypeEnum}", IsDisabled = Model.GeneralPersonAddressId >= 0 };
}
@using (Html.BeginForm("CreateEditGeneralPersonalAddress", Model.ControllerName, FormMethod.Post, new { id = $"frmGeneralPersonalAddress_{Model.AddressTypeEnum}" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.GeneralPersonAddressId)
    @Html.HiddenFor(m => m.PersonId)
    @Html.HiddenFor(m => m.AddressTypeEnum)
    @Html.HiddenFor(m => m.EntityId)
    @Html.HiddenFor(m => m.EntityType)
    @Html.HiddenFor(m => m.ControllerName)
    @if (Model.GeneralPersonAddressId > 0)
    {
        @Html.HiddenFor(m => m.GeneralCountryMasterId)
        @Html.HiddenFor(m => m.GeneralRegionMasterId)
        @Html.HiddenFor(m => m.GeneralCityMasterId)
    }

    <div class="row">
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.FirstName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MiddleName, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.LastName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.EmailAddress, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailAddress)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.PhoneNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.PhoneNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.MobileNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine1, new { @class = "form-label required" })
                @Html.TextAreaFor(x => x.AddressLine1, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine1)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine2, new { @class = "form-label" })
                @Html.TextAreaFor(x => x.AddressLine2, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine2)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCountryMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", countryDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCountryMasterId, null, new { id = $"errorGeneralCountryMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.Postalcode, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.Postalcode, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Postalcode)
            </div>
        </div>
        <div id="postalCodeModal" class="modal fade" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content" id="postalCodeModalContent"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3 readonly-dropdown">
                @Html.LabelFor(x => x.GeneralRegionMasterId, new { @class = "form-label required readonly" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", regionDropdown)
                @Html.ValidationMessageFor(x => x.GeneralRegionMasterId, null, new { id = $"errorGeneralRegionMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCityMasterId, new { @class = "form-label required readonly" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", cityDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCityMasterId, null, new { id = $"errorGeneralCityMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>

        @if (Model.AddressTypeEnum == AddressTypeEnum.PermanentAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-label" })
                    <div class="form-check">
                        @Html.CheckBoxFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-check-input" })
                    </div>
                </div>
            </div>
        }
        @if (Model.AddressTypeEnum == AddressTypeEnum.BusinessAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.CompanyName, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.CompanyName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CompanyName)
                </div>
            </div>
        }
    </div>
    <button type="submit" id="saveDraft_@Model.AddressTypeEnum" class="btn btn-success" data-test-selector="linkSave" onclick="User.SaveGeneralPersonalAddress('@Model.AddressTypeEnum'); return false;">
        @AdminResources.LabelSave
    </button>
}
<script>
        $(function () {
        $("form[id^='frmGeneralPersonalAddress_']").each(function () {
            const $form = $(this);
            const formId = $form.attr("id");

            const postalInput = $form.find('input[name="Postalcode"]');
            const personId = $form.find('input[name="PersonId"]').val();
            const entityId = $form.find('input[name="EntityId"]').val();
            const countrySelect = $form.find('select[name="GeneralCountryMasterId"]');
            let popupTimeout = null;

            postalInput.on('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    return false;
                }
            });

            function isExplicitlyIndiaSelected() {
                const selectedOption = countrySelect.find('option:selected');
                return selectedOption.text()?.toLowerCase().includes('india');
            }

            function fetchPostalCode(postalCode, addressTypeEnum) {
                CoditechCommon.ShowLodder();

                const formSelector = "#frmGeneralPersonalAddress_" + addressTypeEnum;
                const $targetForm = $(formSelector);

                const personIdVal = $targetForm.find('input[name="PersonId"]').val();
                const entityIdVal = $targetForm.find('input[name="EntityId"]').val();

                $.ajax({
                    url: `/GeneralCommon/FetchPostalCode`,
                    type: 'GET',
                    data: {
                        postalCode,
                        personId: personIdVal,
                        entityId: entityIdVal,
                        addressTypeEnum
                    },
                    success: function (response) {
                        $('#postalCodeModalContent').html(response);

                        // Store the AddressTypeEnum inside modal for later use
                        $('#postalCodeModal').data('AddressTypeEnum', addressTypeEnum);

                        $('#postalCodeModal').modal('show');
                        CoditechCommon.HideLodder();
                    },
                    error: function (xhr) {
                        if (xhr.status == "401" || xhr.status == "403") {
                            location.reload();
                        }
                        CoditechNotification.DisplayNotificationMessage("Failed to display record.", "error");
                        CoditechCommon.HideLodder();
                    }
                });
            }

            postalInput.on('input', function () {
                let postalVal = $(this).val().trim();
                postalVal = postalVal.replace(/\D/g, '');
                $(this).val(postalVal);
                clearTimeout(popupTimeout);

                const addressTypeEnum = formId.replace("frmGeneralPersonalAddress_", "");

                if (isExplicitlyIndiaSelected() && /^\d{6}$/.test(postalVal)) {
                    popupTimeout = setTimeout(() => {
                        fetchPostalCode(postalVal, addressTypeEnum);
                    }, 100);
                }
            });

            countrySelect.on('change', function () {
                postalInput.trigger('input');
            });

            $form.find(".btn-success").on('click', function (e) {
                e.preventDefault();

                const addressTypeEnum = formId.replace("frmGeneralPersonalAddress_", "");

                if (!$form[0].checkValidity()) {
                    $form[0].reportValidity();
                    return false;
                }

                const postalVal = postalInput.val().trim();
                if (!/^\d{6}$/.test(postalVal)) {
                    showPostalCodeError(addressTypeEnum);
                    return false;
                }

                const selected = $form.find('input[name="SelectedAddress"]:checked').val();
                if (!selected) {
                    showAddressSelectionError(addressTypeEnum);
                    return;
                }

                const parts = selected.split('|');
                const userAddress = {
                    Name: parts[0],
                    District: parts[1],
                    Division: parts[2],
                    State: parts[3],
                    Country: parts[4],
                    Pincode: parts[5]
                };

                const backendData = {
                    Postalcode: postalVal,
                    PersonId: personId,
                    EntityId: entityId,
                    EntityType: $form.find('input[name="EntityType"]').val(),
                    ControllerName: $form.find('input[name="ControllerName"]').val(),
                    GeneralCountryMasterId: countrySelect.val(),
                    AddressTypeEnum: addressTypeEnum,
                    AddressLine1: $form.find('textarea[name="AddressLine1"]').val(),
                    AddressLine2: $form.find('textarea[name="AddressLine2"]').val(),
                    FirstName: $form.find('input[name="FirstName"]').val(),
                    MiddleName: $form.find('input[name="MiddleName"]').val(),
                    LastName: $form.find('input[name="LastName"]').val(),
                    EmailAddress: $form.find('input[name="EmailAddress"]').val(),
                    PhoneNumber: $form.find('input[name="PhoneNumber"]').val(),
                    MobileNumber: $form.find('input[name="MobileNumber"]').val(),
                };

                const payload = {
                    BackendData: backendData,
                    UserSelectedAddress: userAddress
                };

                console.log("Payload to send:", payload);
                CoditechCommon.ShowLodder();

                $.ajax({
                    url: '/GeneralCommon/ValidateAddress',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(payload),
                    success: function (response) {
                        console.log("ValidateAddress OK");
                        $('#postalCodeModal').modal('hide');
                        CoditechCommon.HideLodder();
                        if (response) {
                            $('#addressContainer').html(response);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status == "401" || xhr.status == "403") {
                            location.reload();
                        }
                        CoditechNotification.DisplayNotificationMessage("Failed to display record.", "error");
                        CoditechCommon.HideLodder();
                    }
                });
            });

            // Validation helpers
            function showPostalCodeError(addressTypeEnum) {
                const errorMsg = `Please enter a valid 6-digit postal code for ${formatAddressType(addressTypeEnum)}.`;
                CoditechNotification.DisplayNotificationMessage(errorMsg, "error");
            }

            function showAddressSelectionError(addressTypeEnum) {
                const errorMsg = `Please select an address for ${formatAddressType(addressTypeEnum)}.`;
                CoditechNotification.DisplayNotificationMessage(errorMsg, "error");
            }

            function formatAddressType(enumString) {
                return enumString.replace(/([A-Z])/g, ' $1').trim();
            }
        });

        // ✅ FIX: Clear only the relevant postal code input field by AddressTypeEnum
        $('#postalCodeModal').on('hidden.bs.modal', function () {
            const addressTypeEnum = $(this).data('AddressTypeEnum');
            if (addressTypeEnum) {
                const targetForm = $("#frmGeneralPersonalAddress_" + addressTypeEnum);
                targetForm.find('input[name="Postalcode"]').val('');
            }
        });
    });


</script>