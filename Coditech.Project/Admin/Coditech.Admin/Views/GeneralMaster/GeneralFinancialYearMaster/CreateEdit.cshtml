@model GeneralFinancialYearViewModel
@{
    ViewBag.Title = Model.GeneralFinancialYearId > 0 ? "Update FinancialYear" : "Add FinancialYear";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.GeneralFinancialYearId > 0)
                                {
                                    <h4 class="card-title">Update Financial Year</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Create Financial Year</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.GeneralFinancialYearId)
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.FromDate, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.FromDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(x => x.FromDate)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.ToDate, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.ToDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(x => x.ToDate)
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script type="text/javascript">
        $(function () {
            function restrictYearRange(datepicker, minDate, maxDate) {
                // Set only year constraints, not specific months
                datepicker.datepicker("option", "minDate", minDate);
                datepicker.datepicker("option", "maxDate", maxDate);
            }
            function updateConstraintsFromFromDate() {
                const fromDate = $("#FromDate").datepicker("getDate");
                if (fromDate) {
                    const minToDate = new Date(fromDate.getFullYear(), 0, 1); // Start of the same year
                    const maxToDate = new Date(fromDate.getFullYear() + 2, 11, 31); // End of 2 years after
                    restrictYearRange($("#ToDate"), minToDate, maxToDate);
                } else {
                    resetDatepickers();
                }
            }
            function updateConstraintsFromToDate() {
                const toDate = $("#ToDate").datepicker("getDate");
                if (toDate) {
                    const minFromDate = new Date(toDate.getFullYear() - 2, 0, 1); // Start of 2 years before
                    const maxFromDate = new Date(toDate.getFullYear(), 11, 31); // End of the same year
                    restrictYearRange($("#FromDate"), minFromDate, maxFromDate);
                } else {
                    resetDatepickers();
                }
            }

            // Initialize FromDate datepicker
            $("#FromDate").datepicker({
                changeMonth: true, // Enable month dropdown
                changeYear: true,  // Enable year dropdown
                showMonthAfterYear: false, // Default layout
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()", // Use actual date format
                autoSize: true,
                showButtonPanel: true,
                closeText: "Clear",
                onSelect: function () {
                    updateConstraintsFromFromDate();
                },
                beforeShow: function (input, instance) {
                    if ($("#ToDate").val() === "") {
                        instance.settings.minDate = null;
                        instance.settings.maxDate = null;
                    }
                },
                onClose: function () {
                    if ($(window.event.srcElement).hasClass("ui-datepicker-close")) {
                        $(this).val("");
                        updateConstraintsFromToDate();
                    }
                }
            });

            // Initialize ToDate datepicker
            $("#ToDate").datepicker({
                changeMonth: true, // Enable month dropdown
                changeYear: true,  // Enable year dropdown
                showMonthAfterYear: false, // Default layout
                dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()", // Use actual date format
                autoSize: true,
                showButtonPanel: true,
                closeText: "Clear",
                onSelect: function () {
                    updateConstraintsFromToDate();
                },
                beforeShow: function (input, instance) {
                    if ($("#FromDate").val() === "") {
                        instance.settings.minDate = null;
                        instance.settings.maxDate = null;
                    }
                },
                onClose: function () {
                    if ($(window.event.srcElement).hasClass("ui-datepicker-close")) {
                        $(this).val("");
                        updateConstraintsFromFromDate();
                    }
                }
            });

            // Function to reset constraints on both datepickers
            function resetDatepickers() {
                $("#FromDate").datepicker("option", "minDate", null);
                $("#FromDate").datepicker("option", "maxDate", null);
                $("#ToDate").datepicker("option", "minDate", null);
                $("#ToDate").datepicker("option", "maxDate", null);
            }

            // Ensure both fields are initially empty
            $("#FromDate").val("");
            $("#ToDate").val("");

            // Reset constraints only when both fields are cleared
            $("#FromDate, #ToDate").on("change", function () {
                if (!$("#FromDate").val() && !$("#ToDate").val()) {
                    resetDatepickers();
                }
            });
        });
    </script>
}