@using Coditech.Admin.Utilities;
@model GymMemberFollowUpViewModel
@{
    Layout = null;
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string displayReminderDateDiv = Model.IsSetReminder ? "display:block" : "display:none";
}
<!-- Page Content-->
<div class="modal-header">
    @if (Model.GymMemberFollowUpId > 0)
    {
        <h6 class="modal-title m-0" id="exampleModalDefaultLabel">
            <span><i class="fas fa-handshake"></i></span>
            <span style="margin-left: 5px;">Update Member Follow Up</span>
        </h6>
    }
    else
    {
        <h6 class="modal-title m-0" id="exampleModalDefaultLabel">
            <span><i class="fas fa-handshake"></i></span>
            <span style="margin-left: 5px;">Add Member Follow Up</span>
        </h6>
    }
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
</div><!--end modal-header-->
@using (Html.BeginForm("CreatEditMemberFollowUp", controllerName, FormMethod.Post, new { id = "frmGymMemberFollowUp" }))
{
    @Html.AntiForgeryToken()
    ;
    @Html.HiddenFor(x => x.GymMemberFollowUpId)
    @Html.HiddenFor(x => x.GymMemberDetailId)
    @Html.HiddenFor(x => x.PersonId)
    <div class="modal-body">
        <div class="row">
            <div class="col-lg-12">
                <div class="mb-3">
                    @Html.LabelFor(x => x.FollowupComment, new { @class = "form-label required" })
                    @Html.TextAreaFor(x => x.FollowupComment, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.FollowupComment)
                </div>
            </div>
            <div class="col-lg-12">
                <div class="mb-3">
                    @Html.LabelFor(x => x.GymFollowupTypesEnumId, new { @class = "form-label required" })
                    @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
           {
               DropdownSelectedValue = Model.GymFollowupTypesEnumId.ToString(),
               DropdownName = "GymFollowupTypesEnumId",
               GroupCode = DropdownTypeEnum.GymFollowupTypes.ToString()
           })
                    @Html.ValidationMessageFor(x => x.GymFollowupTypesEnumId, null, new { id = "errorGymFollowupTypesEnumId" })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="mb-3">
                    @Html.LabelFor(x => x.IsSetReminder, new { @class = "form-label" })
                    <div class="form-check">
                        @Html.CheckBoxFor(x => x.IsSetReminder, new { @class = "form-check-input", @onclick = "GymMemberDetails.IsSetReminder()" })
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="mb-3" id="ReminderDateDivId" style="@displayReminderDateDiv">
                    @Html.LabelFor(x => x.ReminderDate, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.ReminderDate, new { @class = "form-control", @readonly = "true" })
                    @Html.ValidationMessageFor(x => x.ReminderDate, null, new { id = "errorReminderDate" })
                </div>
            </div>
        </div><!--end row-->
    </div>

    <!--end modal-body-->
    <div class="modal-footer">
        <button type="submit" id="saveDraft" class="btn btn-success" data-test-selector="linkSave" onclick="GymMemberDetails.SaveFollowup(); return false;">
            @AdminResources.LabelSave
        </button>

        <button type="button" class="btn btn-soft-secondary btn-sm" data-bs-dismiss="modal">Close</button>
    </div>
}
@Html.Partial("_ValidationScriptsPartial")
<script src="~/js/layout/daterangepicker.js"></script>
<script>
    $(function () {
        $('#ReminderDate').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            showWeekNumbers: false,
            drops: "auto",
            opens: "right",
            autoApply: true,
            "locale": {
                @* "format": "DD-MM-YYYY", *@
                "separator": " - ",
                "applyLabel": "Apply",
                "cancelLabel": "Cancel",
                "fromLabel": "From",
                "toLabel": "To",
                "customRangeLabel": "Custom",
                "weekLabel": "W",
                "daysOfWeek": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "monthNames": [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ],
                "firstDay": 1
            },
            minYear: new Date().getFullYear(),
            maxYear: new Date().getFullYear() + 10
        },
            function (start, end, label) { });
    });
</script>